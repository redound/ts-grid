import Grid from "./Grid";
import { CellInterface } from "./Cell";
import EventEmitter from "ts-core/lib/Events/EventEmitter";
import { HeaderCellInterface } from "./HeaderCell";
export declare const COLUMN_EVENTS: {
    CHANGED_WIDTH: string;
};
export default class Column {
    protected _uniqId: number;
    protected _grid: Grid;
    protected _resizable: boolean;
    protected _minWidth: number;
    protected _maxWidth: number;
    protected _width: number;
    protected _name: string;
    protected _titleFormatter: any;
    protected _descriptionFormatter: any;
    protected _renderable: boolean;
    protected _editOnInput: boolean;
    protected _editable: boolean;
    protected _sortable: boolean;
    protected _editor: any;
    protected _onClear: any;
    protected _allowClear: boolean;
    protected _setter: any;
    protected _getter: any;
    protected _parser: any;
    protected _formatter: any;
    protected _cellType: CellInterface;
    protected _className: string;
    events: EventEmitter;
    constructor();
    descriptionFormatter(descriptionFormatter: any): this;
    getDescriptionFormatter(): any;
    getDescription(): string;
    className(className: string): this;
    getClassName(): string;
    getId(): number;
    setGrid(grid: Grid): void;
    getGrid(): Grid;
    resizable(resizable?: boolean): this;
    getResizable(): boolean;
    minWidth(minWidth: number): this;
    getMinWidth(): number;
    maxWidth(maxWidth: number): this;
    getMaxWidth(): number;
    width(width: number): this;
    getWidth(): number;
    name(name: string): this;
    getName(): string;
    titleFormatter(title: any): this;
    getTitleFormatter(): any;
    getTitle(): string;
    renderable(renderable: boolean): this;
    getRenderable(): boolean;
    editable(editable?: boolean): this;
    getEditable(): boolean;
    sortable(sortable?: boolean): this;
    getSortable(): boolean;
    editOnInput(editOnInput?: boolean): this;
    getEditOnInput(): boolean;
    getHeaderType(): HeaderCellInterface;
    editor(editor: any): this;
    getEditor(): any;
    allowClear(allowClear?: boolean): this;
    getAllowClear(): boolean;
    onClear(onClear: any): this;
    getOnClear(): any;
    cellType(cellType: CellInterface): this;
    getCellType(): CellInterface;
    setter(setter: any): this;
    getSetter(): any;
    getter(getter: any): this;
    getGetter(): any;
    parser(parser: any): this;
    getParser(): any;
    formatter(formatter: any): this;
    getFormatter(): any;
}
